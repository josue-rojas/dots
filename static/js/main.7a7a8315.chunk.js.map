{"version":3,"sources":["components/DotsCollection/styles.module.css","components/Dot/styles.module.css","components/Dot/index.jsx","components/DotsCollection/index.jsx","util/constants.js","util/balanceFunctions.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Dot","className","color","margin","size","renderStyle","backgroundColor","height","width","classNames","styles","dot","style","defaultProps","DotsCollection","length","colorFunction","dotsCollection","_length","_width","dotAllRows","total","dotNum","i","dotRow","j","dataColorFunction","pos","x","y","push","key","renderDots","CIRCLE_COLORS_ZONE16","squareBalance","zoneLength","xZone","yZone","_y","Math","floor","_x","dotZone","rectBalance","zoneWidth","balanceColor2","_","balanceColor4","balanceColor6","balanceColor8","balanceColor12","balanceColor16","App","useState","currBalanceFunc","setCurrBalanceFunc","balanceFunc","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a7a8315.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dotRow\":\"styles_dotRow__OPnd_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dot\":\"styles_dot__13frE\"};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport styles from \"./styles.module.css\";\n\nconst Dot = ({ className, color, margin, size }) => {\n  const renderStyle = {\n    backgroundColor: color,\n    height: `${size}px`,\n    margin: `${margin}px`,\n    width: `${size}px`\n  };\n  return (\n    <div\n      className={classNames(className, styles.dot)}\n      style={renderStyle}\n    ></div>\n  );\n};\n\nDot.defaultProps = {\n  color: \"red\",\n  margin: 3,\n  size: 13\n};\n\nDot.propTypes = {\n  className: PropTypes.string,\n  color: PropTypes.string,\n  margin: PropTypes.number,\n  size: PropTypes.number\n};\n\nexport default Dot;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport styles from \"./styles.module.css\";\nimport Dot from \"components/Dot\";\n\nconst DotsCollection = ({ className, length, width, colorFunction }) => {\n  const renderDots = (_length, _width) => {\n    const dotAllRows = [];\n    const total = _length * _width;\n    let dotNum = 0;\n    // TODO: add callback function that would create the constants needed for the function so they wouldn't be created everytime a function may need something\n    // something like const colorFunctionConst = (a, b c) => {return {length: a*2, height: b / 2, circumferenceF: c * Math.PI,  radiusShort: a* b * c}}()\n    // and that const just gets passed to colorFunction avoiding multiple math stuff\n    for (let i = 0; i < _length; i++) {\n      const dotRow = [];\n      for (let j = 0; j < _width; j++) {\n        // this is all the basic data pass down to the gunction\n        const dataColorFunction = {\n          length: _length,\n          pos: dotNum++,\n          total,\n          width: _width,\n          x: j,\n          y: i\n        };\n        dotRow.push(\n          <Dot key={`dot-${i}-${j}`} color={colorFunction(dataColorFunction)} />\n        );\n      }\n      dotAllRows.push(\n        <div className={styles.dotRow} key={`row-${i}`}>\n          {dotRow}\n        </div>\n      );\n    }\n    return dotAllRows;\n  };\n\n  return (\n    <div className={classNames(className, styles.dotsCollection)}>\n      {renderDots(length, width)}\n    </div>\n  );\n};\n\nDotsCollection.defaultProps = {\n  colorFunction: i => `rgb(${i}, ${i * 4}, ${i * 3})`,\n  length: 12,\n  width: 12\n};\n\nDotsCollection.propTypes = {\n  className: PropTypes.string,\n  colorFunction: PropTypes.func,\n  length: PropTypes.number,\n  width: PropTypes.number\n};\n\nexport default DotsCollection;\n","export const CIRCLE_COLORS = {\n  anzac: \"rgb(207, 144, 75)\",\n  bali_hai: \"rgb(141, 159, 173)\",\n  flame_pea: \"rgb(181, 89, 78)\",\n  fountain_blue: \"rgb(108, 181, 185)\",\n  gossamer: \"rgb(68, 157, 138)\",\n  governor_bay: \"rgb(75, 88, 141)\",\n  harvest_gold: \"rgb(235, 182, 104)\",\n  jordy_blue: \"rgb(131, 175, 220)\",\n  kobi: \"rgb(221, 134, 168)\",\n  lochmara: \"rgb(55, 112, 167)\",\n  matterhorn: \"rgb(77, 77, 77)\",\n  my_pink: \"rgb(212, 140, 130)\",\n  roman: \"rgb(215, 99, 84)\",\n  vin_rouge: \"rgb(147, 86, 102)\",\n  violet_blue: \"rgb(143, 97, 144)\",\n  wax_flower: \"rgb(231, 176, 155)\"\n};\n\nexport const CIRCLE_COLORS_ZONE16 = {\n  \"0\": CIRCLE_COLORS.harvest_gold,\n  \"1\": CIRCLE_COLORS.roman,\n  \"2\": CIRCLE_COLORS.lochmara,\n  \"3\": CIRCLE_COLORS.gossamer,\n  \"4\": CIRCLE_COLORS.kobi,\n  \"5\": CIRCLE_COLORS.vin_rouge,\n  \"6\": CIRCLE_COLORS.jordy_blue,\n  \"7\": CIRCLE_COLORS.flame_pea,\n  \"8\": CIRCLE_COLORS.matterhorn,\n  \"9\": CIRCLE_COLORS.wax_flower,\n  \"10\": CIRCLE_COLORS.bali_hai,\n  \"11\": CIRCLE_COLORS.governor_bay,\n  \"12\": CIRCLE_COLORS.my_pink,\n  \"13\": CIRCLE_COLORS.violet_blue,\n  \"14\": CIRCLE_COLORS.fountain_blue,\n  \"15\": CIRCLE_COLORS.anzac\n};\n","import { CIRCLE_COLORS_ZONE16 } from \"./constants\";\n\nexport const squareBalance = ({ length, width, x, y, zoneLength }) => {\n  // y * L + x - (L - W) * y;\n  // but a square is = y * L + x\n  const xZone = width / zoneLength;\n  const yZone = length / zoneLength;\n  const _y = Math.floor(y / yZone);\n  const _x = Math.floor(x / xZone);\n  const dotZone = Math.floor(_y * zoneLength + _x);\n  return CIRCLE_COLORS_ZONE16[dotZone];\n};\n\nexport const rectBalance = ({ length, width, x, y, zoneLength, zoneWidth }) => {\n  // y * L + x - (L - W) * y;\n  const xZone = width / zoneWidth;\n  const yZone = length / zoneLength;\n  const _y = Math.floor(y / yZone);\n  const _x = Math.floor(x / xZone);\n  const dotZone = Math.floor(\n    _y * zoneLength + _x - (zoneLength - zoneWidth) * _y\n  );\n  return CIRCLE_COLORS_ZONE16[dotZone];\n};\n\nexport const balanceColor2 = _ => {\n  return rectBalance({ ..._, zoneLength: 2, zoneWidth: 1 });\n};\n\nexport const balanceColor4 = _ => {\n  return squareBalance({ ..._, zoneLength: 2 });\n};\n\nexport const balanceColor6 = _ => {\n  return rectBalance({ ..._, zoneLength: 2, zoneWidth: 3 });\n};\n\nexport const balanceColor8 = _ => {\n  return rectBalance({ ..._, zoneLength: 2, zoneWidth: 4 });\n};\n\nexport const balanceColor12 = _ => {\n  return rectBalance({ ..._, zoneLength: 2, zoneWidth: 6 });\n};\n\nexport const balanceColor16 = _ => {\n  return squareBalance({ ..._, zoneLength: 4 });\n};\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport DotsCollection from \"components/DotsCollection\";\nimport {\n  balanceColor2,\n  balanceColor4,\n  balanceColor6,\n  balanceColor8,\n  balanceColor12,\n  balanceColor16\n} from \"util/balanceFunctions\";\n\nfunction App() {\n  const [currBalanceFunc, setCurrBalanceFunc] = useState(0);\n  const balanceFunc = [\n    balanceColor2,\n    balanceColor4,\n    balanceColor6,\n    balanceColor8,\n    balanceColor12,\n    balanceColor16\n  ];\n  return (\n    <div\n      className=\"App\"\n      onClick={() =>\n        setCurrBalanceFunc((currBalanceFunc + 1) % balanceFunc.length)\n      }\n    >\n      <DotsCollection\n        length={12}\n        width={12}\n        colorFunction={balanceFunc[currBalanceFunc]}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}